import { atproto_url } from "../../../config.json"

const allowedCharsRegExp = /^[a-zA-Z0-9]+$/
const allowedCharsCustomDomainRegExp = /^[a-zA-Z0-9\.]+$/
const domainCheckRegExp = /^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-zA-Z]{2,}$/

const atpUrlCheckRegExp = new RegExp(`^${atproto_url
	.replace(".","\\.")
	.replace("*","[a-zA-Z0-9]+")}$`)

const blacklistedDomains: RegExp[] = [

	// russian sites

	/\.ru$/,
	/\.рф$/,
	/\.xn\-\-p1ai$/,

	// websites

	/(\.|^)gov\.lv$/,
	/(\.|^)neplp\.lv$/,
	/(\.|^)president\.lv$/,
	/(\.|^)cia\.gov$/,

	// social media

	/(\.|^)trump(hotels|golf|internationalreality|store)?\.com$/,
	/(\.|^)booktrumpgolf\.com$/,
	/(\.|^)x\.com$/,
	/(\.|^)winred\.com$/,
	/(\.|^)twitter\.com$/,
	/(\.|^)gop\.com$/,
	/(\.|^)donald(j)?trump\.com$/,
	/(\.|^)truthsocial\.com$/,
	/(\.|^)tiktok\.com$/,
	/(\.|^)rumble\.com$/,
	/(\.|^)facebook\.com$/,
	/(\.|^)instagram\.com$/,
	/(\.|^)snap(chat)?\.com$/,
	/(\.|^)google?\.com$/,
	/(\.|^)abc\.xyz$/,

	// free hosting
	
	/\.vercel\.app$/,
	/\.pages\.dev$/,
	/\.scriptlang\.com$/,

	// ddns

	/(\.|^)accesscam\.org$/,
	/(\.|^)camdvr\.org$/,
	/(\.|^)casacam\.net$/,
	/(\.|^)ddnsfree\.com$/,
	/(\.|^)ddnsgeek\.com$/,
	/(\.|^)freeddns\.org$/,
	/(\.|^)giize\.com$/,
	/(\.|^)gleeze\.com$/,
	/(\.|^)kozow\.com$/,
	/(\.|^)loseyourip\.com$/,
	/(\.|^)mywire\.org$/,
	/(\.|^)ooguy\.com$/,
	/(\.|^)theworkpc\.com$/,
	/(\.|^)webredirect\.org$/,
	/(\.|^)1cooldns\.com$/,
	/(\.|^)4cloud\.click$/,
	/(\.|^)bumbleshrimp\.com$/,
	/(\.|^)dynuddns\.com$/,
	/(\.|^)dynuddns\.net$/,
	/(\.|^)ddnsguru\.com$/,
	/(\.|^)mysynology\.net$/

]

export const blacklistedHandleSubdomains: string[] = [
	
	"_atproto",
	"www",
	"api",
	"cdn",
	"rem",
	"labs",
	
	// impersonation

	"owner",
	"admin",
	"moderator",
	"ocbwoy3"

]

export async function isValidHandle(handle: string): Promise<boolean|string> {
	if (!handle || handle.length < 3 || handle.length > 50) {
	  return "Handle must be 3-50 chars long"; // Handle length is invalid
	}

	if (!allowedCharsCustomDomainRegExp.test(handle)) return `Invalid Domain: Only English UTF-8 Characters are allowed. (/${allowedCharsCustomDomainRegExp.source}/)`;

	const isBlacklisted: false | string = await new Promise((resolve)=>{
		blacklistedDomains.forEach((reg: RegExp) => {
			if (reg.test(handle)) {
				resolve(reg.source);
			}
		});
		resolve(false);
	})

	if (isBlacklisted !== false) return `Blacklisted Domain: Matched RegExp /${isBlacklisted}/`;

	if (atpUrlCheckRegExp.test(handle)) {
		const userhandle: string = handle.match(/^([a-zA-Z0-9]+)\./)?.[1] as string;
		if (/u(ser)?[0-9]+/.test(userhandle)) return `Blacklisted Handle: Matched REM's default autogenerated handles`;
		
		if (blacklistedHandleSubdomains.includes(userhandle)) return `Blacklisted Handle: Matched REM's handle blacklist (impersonation? fraud? existing subdomain?)`;
		
		return true;
	}

	return true; // All checks passed
}